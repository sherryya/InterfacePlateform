package com.mina.client;
import java.net.InetSocketAddress;    
import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;   
import org.apache.mina.core.future.ConnectFuture;   
import org.apache.mina.filter.codec.ProtocolCodecFilter;   
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;   
import org.apache.mina.transport.socket.nio.NioSocketConnector;   
import com.dto.SendReport;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
/**  
 * mina客户端  
 */  

/*
//查看车门状态
public static String LOOK_DOOR="2E900301410129";
//查看车窗状态
public static String LOOK_WINDOWS="2E900301410426";
//查看中控锁状态
public static String LOOK_LOCK="2E900301A102C8";
//中控落锁指令
public static String LOCK_CAR="2E900301A101C9";*/

public class MinaClient {   
    @SuppressWarnings("deprecation")
	public static void main(String []args)throws Exception{   
        //Create TCP/IP connection   
        NioSocketConnector connector = new NioSocketConnector();   
        //创建接受数据的过滤器     com.main.AutoClacCanStream
        DefaultIoFilterChainBuilder chain = connector.getFilterChain();   
        //设定这个过滤器将一行一行(/r/n)的读取数据   
        chain.addLast("myChin", new ProtocolCodecFilter(new TextLineCodecFactory()));   
        //客户端的消息处理器：一个SamplMinaServerHander对象   
        SendReport sendReport=new SendReport();
/*        sendReport.setSendContent("2E4103000500B6");
        sendReport.setSendIP("1111111111");
        sendReport.setSendType("3");
        sendReport.setSendHead("CAN");//closeWindow
        sendReport.setSendTerminal("CAR");*/

        sendReport.setSendContent("2E900301A202C7");
        sendReport.setSendIP("1111111111");
        sendReport.setSendType("0");//下载
        sendReport.setSendHead("CAN");//closeWindow
        sendReport.setSendTerminal("CAR");
        Gson gson=new Gson();
        Type listType = new TypeToken<SendReport>(){}.getType();
        String json=gson.toJson(sendReport, listType);
        connector.setHandler(new MinaClientHandler(json+"#"));   
        //set connect timeout   
        connector.setConnectTimeout(30);   
        //连接到服务器：   
        ConnectFuture cf = connector.connect(new InetSocketAddress("125.211.221.231",10086));   
        //Wait for the connection attempt to be finished.   
       // ConnectFuture cf = connector.connect(new InetSocketAddress("127.0.0.1",8004));
        cf.awaitUninterruptibly();   
        cf.getSession().getCloseFuture().awaitUninterruptibly();   
        connector.dispose();   
    }  
}